@page "/session/{SessionId}"
@implements IAsyncDisposable
@inject IJSRuntime JsRuntime;
@inject ILogger<Index> Logger;
@inject CodeShare.Services.SessionsManager.ISessionsManager SessionsMgr;

@using ISessionState = CodeShare.Model.Entities.ISessionState;
@using Session = CodeShare.Model.Entities.Session;
@using User = CodeShare.Model.Entities.User;

<div class="sidebar">
    <MatList Style="padding: 0px">
        <MatListGroup>
            <MatListGroupSubHeader Style="color: white; font-weight: bold; margin:18px">
                Collaborators
            </MatListGroupSubHeader>
            <MatListDivider Style="border-color: white"></MatListDivider>
            <div style="max-height: 80vh; overflow: auto">
                @foreach (var collaborator in CurrentSession.Collaborators)
                {
                    <MatListItem Style="color: white;">@collaborator.Name</MatListItem>
                }
            </div>
        </MatListGroup>
    </MatList>
</div>
<div style="margin:1.5rem">
    <h1>@CurrentSession?.CurrentTask?.Name</h1>
    @CurrentSession?.CurrentTask?.Description
    <Editor @ref="Editor" SessionId="@SessionId"></Editor>
</div>

@code {

    [Parameter]
    public string SessionId { get; set; } = string.Empty;

    private ISessionState CurrentSession { get; set; } = Session.Empty;

    private User CurrentUser { get; } = new User { Name = "Some name" };

    private Editor? Editor { get; set; }

    private DotNetObjectReference<Index>? objRef;

    private async Task UpdateComponent(ISessionState sessionState) =>
        await InvokeAsync(() =>
        {
            Logger.LogInformation($"UpdateComponent called, session {sessionState.Id}");
            StateHasChanged();
        });

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            objRef = DotNetObjectReference.Create(this);
            await JsRuntime.InvokeVoidAsync("disposeComponentOnTabClosed", objRef);
            await SessionsMgr.ConnectToSessionAsync(CurrentUser, SessionId);
            CurrentSession = SessionsMgr.GetSessionById(SessionId);
            CurrentSession.Connected += UpdateComponent;
            CurrentSession.Disconnected += UpdateComponent;
            StateHasChanged();
        }
        await base.OnInitializedAsync();
    }

    [JSInvokable]
    public async ValueTask DisposeAsync()
    {
        Logger.LogDebug($"Disposing {nameof(Index)}");
        await SessionsMgr.DisconnectFromSessionAsync(CurrentUser, SessionId);
        CurrentSession.Connected -= UpdateComponent;
        CurrentSession.Disconnected -= UpdateComponent;
        objRef?.Dispose();
        await (Editor?.DisposeAsync() ?? new ValueTask());
    }
}